# 실루엣 기법은 클러스터링의 품질을 정량적으로 계산해주는 방법 입니다.

import numpy as np
from sklearn.metrics import silhouette_samples
from matplotlib import cm

def plotSilhouette(X, y_km):
  cluster_labels = np.unique(y_km)  # y_km의 고유갑을 멤버로 하는 numpy 배열을 cluster_labels로 둔다. y_km 고유값 개수는 클러스터의 개수와 동일 합니다.
  n_clusters = cluster_labels.shape[0] # 클러스터의 개수를 n_cluster로 둡니다.
  silhouette_vals = silhouette_samples(X, y_km, metrics='euclidean') # 실루엣 개수를 계산하고 그 결과를 silhouette_vals로 둔다.
  y_ax_lower, y_ax_upper = 0, 0
  yticks = []
  
  for i, c in enumerate(cluster_labes):
    c_silhouette_vals = silhouette_vals[y_km ==c]
    c_silhouette_vals.sort()
    y_ax_upper += len(c_silhouette_vals)
    color = cm.jet(i/n_clusters)
    
    plt.barth(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, edgecolor='none', color=color)
    yticks.append((y_ax_lower + y_ax_upper)/2)
    x_ax_lower += len(c_silhouette_vals)
    
  silhouette_avg = npmean(silhouette_vals) # 모든 데이터들의 실루엣 계수를 평균값을 빨간 점선으로 표시합니다.
  plt.axvline(silhouette_avg, color='red', linestyle='--')   # 모든 데이터들의 실루엣 계수를 평균값을 빨간 점선으로 표시합니다.
  plt.ylabel('Cluster')
  plt.xlabel('number of silhouette')
  plt.show()

X, y = make_blobs(n_samples=150, n_features=2, centers=3, cluster_std=0.5, shuffle=True, random_state=0)
km = KMeans(n_clusters=3, random_state=0)
y_km = km.fit_prdict(X)
plotSilhouette(X, y_km)
